name: Release

on:
  push:
    tags:
      - "v*.*.*" # Trigger on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 1.0.0)"
        required: true
        type: string

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: "temurin"
          cache: maven

      - name: Validate version format
        run: |
          if [[ "${{ github.event.inputs.version || github.ref_name }}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version format is valid"
          else
            echo "Invalid version format. Use semantic versioning (e.g., 1.0.0)"
            exit 1
          fi

      - name: Run full test suite
        run: mvn clean test -B

      - name: Run code quality checks
        run: |
          mvn checkstyle:check -B
          mvn spotbugs:check -B

      - name: Verify no SNAPSHOT dependencies
        run: |
          if mvn dependency:list | grep -i snapshot; then
            echo "SNAPSHOT dependencies found. Remove before release."
            exit 1
          fi

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: "temurin"
          cache: maven

      - name: Set version from tag/input
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false

      - name: Build release artifacts
        run: |
          mvn clean package -B -DskipTests
          mvn javadoc:jar source:jar -B

      - name: Create distribution
        run: |
          mkdir -p release/
          cp target/*.jar release/
          cp README.md release/
          cp LICENSE release/ || echo "No LICENSE file found"

          # Create release notes
          echo "# Military Coordination System v${{ env.RELEASE_VERSION }}" > release/RELEASE_NOTES.md
          echo "" >> release/RELEASE_NOTES.md
          echo "## What's New" >> release/RELEASE_NOTES.md
          echo "- Real-time military coordination system" >> release/RELEASE_NOTES.md
          echo "- Data-oriented functional programming approach" >> release/RELEASE_NOTES.md
          echo "- Java 21+ support" >> release/RELEASE_NOTES.md
          echo "" >> release/RELEASE_NOTES.md
          echo "## Technical Details" >> release/RELEASE_NOTES.md
          echo "- Built with Java ${{ env.JAVA_VERSION }}" >> release/RELEASE_NOTES.md
          echo "- Maven build system" >> release/RELEASE_NOTES.md
          echo "- JUnit 5 testing framework" >> release/RELEASE_NOTES.md
          echo "- Functional programming with Vavr" >> release/RELEASE_NOTES.md

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ env.RELEASE_VERSION }}
          path: release/

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ env.RELEASE_VERSION || github.ref_name }}
          path: release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version && format('v{0}', github.event.inputs.version) || github.ref_name }}
          name: Military Coordination System ${{ github.event.inputs.version || github.ref_name }}
          body_path: release/RELEASE_NOTES.md
          files: |
            release/*.jar
            release/README.md
          draft: false
          prerelease: false
          generate_release_notes: true

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-github-release
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: "temurin"
          cache: maven

      - name: Generate documentation
        run: |
          mvn javadoc:javadoc -B

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/site/apidocs
          destination_dir: docs/api

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-github-release, update-documentation]
    if: always() && needs.create-github-release.result == 'success'

    steps:
      - name: Create release notification issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ github.event.inputs.version || github.ref_name }}';
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš€ Release ${version} completed`,
              body: `
              ## Release ${version} is now available!

              **Release highlights:**
              - Military Coordination System update
              - Enhanced performance and functionality
              - Updated dependencies and security fixes

              **What's next:**
              - [ ] Update project documentation
              - [ ] Announce release to users
              - [ ] Plan next development cycle
              - [ ] Review and close related issues

              **Links:**
              - [Release Page](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${version})
              - [Documentation](https://github.com/${context.repo.owner}/${context.repo.repo}/docs)

              This issue can be closed once post-release tasks are completed.
              `,
              labels: ['release', 'documentation']
            })
